---
AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'
Description: " Lambda Function"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Lambda Function Info"
        Parameters:
          - MyLambdaFunction
          - AliasName
      - Label:
          default: "Lambda Execution Info"
        Parameters:
          - Runtime
          - Handler
          - Memory
          - Timeout

      - Label:
          default: "Miscellaneous"
        Parameters:
          - "Product"
          - "EnvironmentType"
          - "TagCostCenter"
          - "Owner"
          - "App"
          - "ResourceName"

    ParameterLabels:
        MyLambdaFunction:
          default: " "
        LambdaName:
          default: " "
        AliasName:
          default: " "
        Runtime:
          default: " "
        Handler:
          default: " "
        Memory:
          default: " "
        Timeout:
          default: " "
        CoreLayerName:
          default: " "
        CoreLayerVersion:
          default: " "
        Product:
          default: " "
        TagCostCenter:
          default: " "
        EnvironmentType:
          default: " "
        Owner:
          default: " "
        App:
          default: " "
        ResourceName:
          default: " "
Parameters:
  MyLambdaFunction:
    Description: "Lambda Function Name"
    Type: String
    ConstraintDescription: "Malformed bucket name, must include letters (A-Z and a-z), numbers (0-9), and dashes (-)."
    AllowedPattern: "^[A-Za-z0-9-]+$"
    Default: "My-Sample-Lambda-Function"

  
  Runtime:
    Description: "Lambda Function Runtime"
    Type: String
    Default: python:3.9

  Handler:
    Description: "Lambda Function Handler"
    Type: String
    Default: app.lambdaHandler

  Memory:
    Description: "Lambda Function Memory"
    Type: String
    Default: 128

  Timeout:
    Description: "Lambda Function Timeout"
    Type: String
    Default: 30
    
  AliasName:
    Description: "Lambda Function Alias Name"
    Type: String
    Default: "dev"  

  EnvironmentType:
    Description: "Environment"
    Type: String
    AllowedValues:
      - "dev"
      - "uat"
      - "prd"
    Default: "dev"



  Product:
    Description: "Product/App name"
    Type: String
    ConstraintDescription: "Malformed project name, allowed values are letters (a-z), numbers (0-9), and hyphens (-)."
    Default: "my sample product"

  TagCostCenter:
    Description: "CostCenter ID for the Project."
    Type: String
    Default: "1000"

  Owner:
    Description: "ID of person creating Resource"
    Type: String
    Default: "devops"

  App:
    Description: "Application Name"
    Type: String
    Default: "sample application"


Mappings: 
  env:
     dev:
      LambdaVpcSecurityGroup: sg-0e4207658a8857d43
      LambdaVpcSubnets: "subnet-0a08ce184448d4ad5,subnet-0c0292dde4087e4c0"

Resources:
     
  MySampleLambda:
    Type: AWS::Serverless::Function
    DependsOn:
        - ExecutiononLambdaRole
    Properties:
      Codeuri: ../code/myfunction.zip
      Description: 'My sample project lambda function'
      FunctionName: !Sub ${MyLambdaFunction}-${EnvironmentType}
      Handler: !Ref Handler
      MemorySize: !Ref Memory
      Role: !GetAtt ExecutionSampleLambdaRole.Arn
      Runtime: !Ref Runtime
      Tags:
          cost-centre: !Ref TagCostCenter
          product: !Ref Product
          app: !Ref App
          env: !Ref EnvironmentType
          owner: !Ref Owner
          Name: !Sub "${MyLambdaFunction}-${EnvironmentType}"
      Timeout: !Ref Timeout
      VpcConfig:
         SecurityGroupIds: !Split [ ",", !FindInMap [env, !Ref "EnvironmentType", LambdaVpcSecurityGroup]]
         SubnetIds: !Split [ ",", !FindInMap [env, !Ref "EnvironmentType", LambdaVpcSubnets] ]


  ExecutionSampleLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: CloudwatchLogs
          PolicyDocument:
             Version: 2012-10-17
             Statement:
                - Sid: LogGroupPrivillages
                  Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:GetLogEvents"
                    - "logs:PutLogEvents"
                  Resource:
                    - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
                - Sid: EC2NetworkInterfacePrivillages
                  Effect: Allow
                  Action:
                    - "ec2:DescribeInstances"
                    - "ec2:CreateNetworkInterface"
                    - "ec2:AttachNetworkInterface"
                    - "ec2:DescribeNetworkInterfaces"
                    - "ec2:DeleteNetworkInterface"
                  Resource: "*"
                 
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
             - Effect: Allow
               Principal:
                  Service:
                     - lambda.amazonaws.com
               Action:
                  - sts:AssumeRole
  
